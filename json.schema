import { createZodDto } from "nestjs-zod";
import { z } from "nestjs-zod/z";

export const rneSchema = z.array(
  z.object({
    updatedAt: z.string(),
    nombreRepresentantsActifs: z.number(),
    nombreEtablissementsOuverts: z.number(),
    id: z.string(),
    formality: z.object({
      siren: z.string(),
      content: z.object({
        succursaleOuFiliale: z.string(),
        formeExerciceActivitePrincipale: z.string(),
        natureCreation: z.object({
          dateCreation: z.string(),
          societeEtrangere: z.boolean(),
          formeJuridique: z.string(),
          microEntreprise: z.boolean(),
          etablieEnFrance: z.boolean(),
          salarieEnFrance: z.boolean(),
          relieeEntrepriseAgricole: z.boolean(),
          entrepriseAgricole: z.boolean(),
          eirl: z.boolean(),
        }),
        personneMorale: z.object({
          adresseEntreprise: z.object({
            caracteristiques: z.object({
              ambulant: z.boolean(),
            }),
            adresse: z.object({
              roleAdressePresent: z.boolean(),
              codePostalPresent: z.boolean(),
              communePresent: z.boolean(),
              codeInseeCommunePresent: z.boolean(),
              typeVoiePresent: z.boolean(),
              voiePresent: z.boolean(),
              voieCodifieePresent: z.boolean(),
              numVoiePresent: z.boolean(),
              indiceRepetitionPresent: z.boolean(),
              distributionSpecialePresent: z.boolean(),
              communeAnciennePresent: z.boolean(),
              rgpdPresent: z.boolean(),
              datePriseEffetAdressePresent: z.boolean(),
              complementLocalisationPresent: z.boolean(),
              communeDeRattachementPresent: z.boolean(),
              caracteristiquesPresent: z.boolean(),
              indicateurValidationBANPresent: z.boolean(),
              cedexPresent: z.boolean(),
              pays: z.string(),
              codePays: z.string(),
              codePostal: z.string(),
              commune: z.string(),
              codeInseeCommune: z.string(),
              typeVoie: z.string(),
              voie: z.string(),
              numVoie: z.string(),
            }),
          }),
          etablissementPrincipal: z.object({
            descriptionEtablissement: z.object({
              rolePourEntreprise: z.string(),
              pays: z.string(),
              codePays: z.string(),
              siret: z.string(),
              activiteNonSedentaire: z.boolean(),
              indicateurEtablissementPrincipal: z.boolean(),
              statutPourFormalite: z.string(),
              codeApe: z.string(),
              etablissementValidated: z.boolean(),
              etablissementRdd: z.boolean(),
            }),
            adresse: z.object({
              roleAdressePresent: z.boolean(),
              codePostalPresent: z.boolean(),
              communePresent: z.boolean(),
              codeInseeCommunePresent: z.boolean(),
              typeVoiePresent: z.boolean(),
              voiePresent: z.boolean(),
              voieCodifieePresent: z.boolean(),
              numVoiePresent: z.boolean(),
              indiceRepetitionPresent: z.boolean(),
              distributionSpecialePresent: z.boolean(),
              communeAnciennePresent: z.boolean(),
              rgpdPresent: z.boolean(),
              datePriseEffetAdressePresent: z.boolean(),
              complementLocalisationPresent: z.boolean(),
              communeDeRattachementPresent: z.boolean(),
              caracteristiquesPresent: z.boolean(),
              indicateurValidationBANPresent: z.boolean(),
              cedexPresent: z.boolean(),
              pays: z.string(),
              codePays: z.string(),
              codePostal: z.string(),
              commune: z.string(),
              codeInseeCommune: z.string(),
              typeVoie: z.string(),
              voie: z.string(),
              numVoie: z.string(),
              caracteristiques: z.object({
                ambulant: z.boolean(),
              }),
            }),
            activites: z.array(
              z.object({
                categoryCode: z.string(),
                activiteId: z.string(),
                indicateurPrincipal: z.boolean(),
                indicateurProlongement: z.boolean(),
                dateDebut: z.string(),
                exerciceActivite: z.string(),
                indicateurNonSedentaire: z.boolean(),
                formeExercice: z.string(),
                categorisationActivite1: z.string(),
                categorisationActivite2: z.string(),
                categorisationActivite3: z.string(),
                categorisationActivite4: z.string(),
                descriptionDetaillee: z.string(),
                indicateurActiviteeApe: z.boolean(),
                indicateurArtisteAuteur: z.boolean(),
                indicateurMarinProfessionnel: z.boolean(),
                rolePrincipalPourEntreprise: z.boolean(),
                codeApe: z.string(),
                activiteRattacheeEirl: z.boolean(),
                origine: z.object({
                  typeOrigine: z.string(),
                }),
              }),
            ),
            registreAnterieur: z.object({
              raa: z.object({
                estPresent: z.boolean(),
              }),
              rnm: z.object({
                estPresent: z.boolean(),
              }),
              rncs: z.object({
                estPresent: z.boolean(),
                dateDebut: z.string().optional(),
              }),
            }),
          }),
          composition: z.object({
            pouvoirs: z.array(
              z.object({
                roleEntreprise: z.string(),
                typeDePersonne: z.string(),
                indicateurActifAgricole: z.boolean(),
                representantId: z.string(),
                individu: z.object({
                  descriptionPersonne: z.object({
                    sirenPresent: z.boolean(),
                    dateEffetRoleDeclarantPresent: z.boolean(),
                    genrePresent: z.boolean(),
                    titrePresent: z.boolean(),
                    dateDeNaissance: z.string(),
                    dateDeNaissancePresent: z.boolean(),
                    paysNaissancePresent: z.boolean(),
                    codePaysNaissancePresent: z.boolean(),
                    lieuDeNaissancePresent: z.boolean(),
                    codePostalNaissancePresent: z.boolean(),
                    codeInseeGeographiquePresent: z.boolean(),
                    situationMatrimonialePresent: z.boolean(),
                    qualiteDeNonSedentaritePresent: z.boolean(),
                    indicateurDeNonSedentaritePresent: z.boolean(),
                    role: z.string(),
                    nom: z.string(),
                    prenoms: z.array(z.string()),
                    nationalite: z.string(),
                    codeNationalite: z.string(),
                    situationMatrimoniale: z.string(),
                  }),
                  adresseDomicile: z.object({
                    roleAdressePresent: z.boolean(),
                    codePostalPresent: z.boolean(),
                    communePresent: z.boolean(),
                    codeInseeCommunePresent: z.boolean(),
                    typeVoiePresent: z.boolean(),
                    voiePresent: z.boolean(),
                    voieCodifieePresent: z.boolean(),
                    numVoiePresent: z.boolean(),
                    indiceRepetitionPresent: z.boolean(),
                    distributionSpecialePresent: z.boolean(),
                    communeAnciennePresent: z.boolean(),
                    rgpdPresent: z.boolean(),
                    datePriseEffetAdressePresent: z.boolean(),
                    complementLocalisationPresent: z.boolean(),
                    communeDeRattachementPresent: z.boolean(),
                    caracteristiquesPresent: z.boolean(),
                    indicateurValidationBANPresent: z.boolean(),
                    cedexPresent: z.boolean(),
                    pays: z.string(),
                    codePays: z.string(),
                    codePostal: z.string(),
                    commune: z.string(),
                    codeInseeCommune: z.string(),
                  }),
                }),
                actif: z.boolean(),
              }),
            ),
          }),
          identite: z.object({
            entreprise: z.object({
              siren: z.string(),
              denomination: z.string(),
              formeJuridique: z.string(),
              nicSiege: z.string(),
              codeApe: z.string(),
              dateImmat: z.string(),
              dateDebutActiv: z.string(),
              entrepriseValidated: z.boolean(),
              entrepriseRdd: z.boolean(),
            }),
            description: z.object({
              objet: z.string(),
              duree: z.number(),
              dateClotureExerciceSocial: z.string(),
              datePremiereCloture: z.string(),
              ess: z.boolean(),
              capitalVariable: z.boolean(),
              montantCapital: z.number(),
              deviseCapital: z.string(),
              indicateurOrigineFusionScission: z.boolean(),
              indicateurAssocieUnique: z.boolean(),
              indicateurAssocieUniqueDirigeant: z.boolean(),
              dateFinExistence: z.string(),
            }),
          }),
          structureEntreprise: z.object({
            indicateurPrincipalIdemSiege: z.boolean(),
            aucuneActivite: z.boolean(),
          }),
        }),
        registreAnterieur: z.object({
          raa: z.object({
            estPresent: z.boolean(),
          }),
          rnm: z.object({
            estPresent: z.boolean(),
          }),
          rncs: z.object({
            estPresent: z.boolean(),
            dateImmatriculation: z.string(),
          }),
        }),
      }),
      diffusionINSEE: z.string(),
      typePersonne: z.string(),
      diffusionCommerciale: z.boolean(),
      formeJuridique: z.string(),
    }),
    siren: z.string(),
  }),
);

export class RNE extends createZodDto(rneSchema) {}
